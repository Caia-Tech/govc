// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/govc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoVCService_CreateRepository_FullMethodName      = "/govc.GoVCService/CreateRepository"
	GoVCService_GetRepository_FullMethodName         = "/govc.GoVCService/GetRepository"
	GoVCService_DeleteRepository_FullMethodName      = "/govc.GoVCService/DeleteRepository"
	GoVCService_ListRepositories_FullMethodName      = "/govc.GoVCService/ListRepositories"
	GoVCService_StoreBlob_FullMethodName             = "/govc.GoVCService/StoreBlob"
	GoVCService_GetBlob_FullMethodName               = "/govc.GoVCService/GetBlob"
	GoVCService_StoreBlobWithDelta_FullMethodName    = "/govc.GoVCService/StoreBlobWithDelta"
	GoVCService_GetBlobWithDelta_FullMethodName      = "/govc.GoVCService/GetBlobWithDelta"
	GoVCService_BatchOperations_FullMethodName       = "/govc.GoVCService/BatchOperations"
	GoVCService_AddFile_FullMethodName               = "/govc.GoVCService/AddFile"
	GoVCService_ReadFile_FullMethodName              = "/govc.GoVCService/ReadFile"
	GoVCService_WriteFile_FullMethodName             = "/govc.GoVCService/WriteFile"
	GoVCService_RemoveFile_FullMethodName            = "/govc.GoVCService/RemoveFile"
	GoVCService_MoveFile_FullMethodName              = "/govc.GoVCService/MoveFile"
	GoVCService_Commit_FullMethodName                = "/govc.GoVCService/Commit"
	GoVCService_GetCommit_FullMethodName             = "/govc.GoVCService/GetCommit"
	GoVCService_ListCommits_FullMethodName           = "/govc.GoVCService/ListCommits"
	GoVCService_CreateBranch_FullMethodName          = "/govc.GoVCService/CreateBranch"
	GoVCService_ListBranches_FullMethodName          = "/govc.GoVCService/ListBranches"
	GoVCService_DeleteBranch_FullMethodName          = "/govc.GoVCService/DeleteBranch"
	GoVCService_CheckoutBranch_FullMethodName        = "/govc.GoVCService/CheckoutBranch"
	GoVCService_MergeBranch_FullMethodName           = "/govc.GoVCService/MergeBranch"
	GoVCService_FullTextSearch_FullMethodName        = "/govc.GoVCService/FullTextSearch"
	GoVCService_ExecuteSQLQuery_FullMethodName       = "/govc.GoVCService/ExecuteSQLQuery"
	GoVCService_SearchWithAggregation_FullMethodName = "/govc.GoVCService/SearchWithAggregation"
	GoVCService_StreamBlob_FullMethodName            = "/govc.GoVCService/StreamBlob"
	GoVCService_UploadBlobStream_FullMethodName      = "/govc.GoVCService/UploadBlobStream"
	GoVCService_GetHealth_FullMethodName             = "/govc.GoVCService/GetHealth"
	GoVCService_GetStatus_FullMethodName             = "/govc.GoVCService/GetStatus"
)

// GoVCServiceClient is the client API for GoVCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GoVC Service Definition
type GoVCServiceClient interface {
	// Repository Management
	CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*CreateRepositoryResponse, error)
	GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*GetRepositoryResponse, error)
	DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
	// Blob Operations
	StoreBlob(ctx context.Context, in *StoreBlobRequest, opts ...grpc.CallOption) (*StoreBlobResponse, error)
	GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (*GetBlobResponse, error)
	StoreBlobWithDelta(ctx context.Context, in *StoreBlobWithDeltaRequest, opts ...grpc.CallOption) (*StoreBlobWithDeltaResponse, error)
	GetBlobWithDelta(ctx context.Context, in *GetBlobWithDeltaRequest, opts ...grpc.CallOption) (*GetBlobWithDeltaResponse, error)
	// Batch Operations
	BatchOperations(ctx context.Context, in *BatchOperationsRequest, opts ...grpc.CallOption) (*BatchOperationsResponse, error)
	// File Operations
	AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error)
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error)
	WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error)
	RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Commit Operations
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*GetCommitResponse, error)
	ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsResponse, error)
	// Branch Operations
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckoutBranch(ctx context.Context, in *CheckoutBranchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MergeBranch(ctx context.Context, in *MergeBranchRequest, opts ...grpc.CallOption) (*MergeBranchResponse, error)
	// Search Operations
	FullTextSearch(ctx context.Context, in *FullTextSearchRequest, opts ...grpc.CallOption) (*FullTextSearchResponse, error)
	ExecuteSQLQuery(ctx context.Context, in *ExecuteSQLQueryRequest, opts ...grpc.CallOption) (*ExecuteSQLQueryResponse, error)
	SearchWithAggregation(ctx context.Context, in *SearchWithAggregationRequest, opts ...grpc.CallOption) (*SearchWithAggregationResponse, error)
	// Streaming Operations
	StreamBlob(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamBlobRequest, StreamBlobResponse], error)
	UploadBlobStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadBlobStreamRequest, UploadBlobStreamResponse], error)
	// Health and Status
	GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type goVCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoVCServiceClient(cc grpc.ClientConnInterface) GoVCServiceClient {
	return &goVCServiceClient{cc}
}

func (c *goVCServiceClient) CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*CreateRepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRepositoryResponse)
	err := c.cc.Invoke(ctx, GoVCService_CreateRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*GetRepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepositoryResponse)
	err := c.cc.Invoke(ctx, GoVCService_GetRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GoVCService_DeleteRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, GoVCService_ListRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) StoreBlob(ctx context.Context, in *StoreBlobRequest, opts ...grpc.CallOption) (*StoreBlobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreBlobResponse)
	err := c.cc.Invoke(ctx, GoVCService_StoreBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (*GetBlobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlobResponse)
	err := c.cc.Invoke(ctx, GoVCService_GetBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) StoreBlobWithDelta(ctx context.Context, in *StoreBlobWithDeltaRequest, opts ...grpc.CallOption) (*StoreBlobWithDeltaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreBlobWithDeltaResponse)
	err := c.cc.Invoke(ctx, GoVCService_StoreBlobWithDelta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) GetBlobWithDelta(ctx context.Context, in *GetBlobWithDeltaRequest, opts ...grpc.CallOption) (*GetBlobWithDeltaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlobWithDeltaResponse)
	err := c.cc.Invoke(ctx, GoVCService_GetBlobWithDelta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) BatchOperations(ctx context.Context, in *BatchOperationsRequest, opts ...grpc.CallOption) (*BatchOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchOperationsResponse)
	err := c.cc.Invoke(ctx, GoVCService_BatchOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFileResponse)
	err := c.cc.Invoke(ctx, GoVCService_AddFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadFileResponse)
	err := c.cc.Invoke(ctx, GoVCService_ReadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteFileResponse)
	err := c.cc.Invoke(ctx, GoVCService_WriteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GoVCService_RemoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GoVCService_MoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, GoVCService_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*GetCommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommitResponse)
	err := c.cc.Invoke(ctx, GoVCService_GetCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommitsResponse)
	err := c.cc.Invoke(ctx, GoVCService_ListCommits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, GoVCService_CreateBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBranchesResponse)
	err := c.cc.Invoke(ctx, GoVCService_ListBranches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GoVCService_DeleteBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) CheckoutBranch(ctx context.Context, in *CheckoutBranchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GoVCService_CheckoutBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) MergeBranch(ctx context.Context, in *MergeBranchRequest, opts ...grpc.CallOption) (*MergeBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeBranchResponse)
	err := c.cc.Invoke(ctx, GoVCService_MergeBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) FullTextSearch(ctx context.Context, in *FullTextSearchRequest, opts ...grpc.CallOption) (*FullTextSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FullTextSearchResponse)
	err := c.cc.Invoke(ctx, GoVCService_FullTextSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) ExecuteSQLQuery(ctx context.Context, in *ExecuteSQLQueryRequest, opts ...grpc.CallOption) (*ExecuteSQLQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteSQLQueryResponse)
	err := c.cc.Invoke(ctx, GoVCService_ExecuteSQLQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) SearchWithAggregation(ctx context.Context, in *SearchWithAggregationRequest, opts ...grpc.CallOption) (*SearchWithAggregationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchWithAggregationResponse)
	err := c.cc.Invoke(ctx, GoVCService_SearchWithAggregation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) StreamBlob(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamBlobRequest, StreamBlobResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GoVCService_ServiceDesc.Streams[0], GoVCService_StreamBlob_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamBlobRequest, StreamBlobResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GoVCService_StreamBlobClient = grpc.BidiStreamingClient[StreamBlobRequest, StreamBlobResponse]

func (c *goVCServiceClient) UploadBlobStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadBlobStreamRequest, UploadBlobStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GoVCService_ServiceDesc.Streams[1], GoVCService_UploadBlobStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadBlobStreamRequest, UploadBlobStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GoVCService_UploadBlobStreamClient = grpc.ClientStreamingClient[UploadBlobStreamRequest, UploadBlobStreamResponse]

func (c *goVCServiceClient) GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, GoVCService_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVCServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, GoVCService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoVCServiceServer is the server API for GoVCService service.
// All implementations must embed UnimplementedGoVCServiceServer
// for forward compatibility.
//
// GoVC Service Definition
type GoVCServiceServer interface {
	// Repository Management
	CreateRepository(context.Context, *CreateRepositoryRequest) (*CreateRepositoryResponse, error)
	GetRepository(context.Context, *GetRepositoryRequest) (*GetRepositoryResponse, error)
	DeleteRepository(context.Context, *DeleteRepositoryRequest) (*emptypb.Empty, error)
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
	// Blob Operations
	StoreBlob(context.Context, *StoreBlobRequest) (*StoreBlobResponse, error)
	GetBlob(context.Context, *GetBlobRequest) (*GetBlobResponse, error)
	StoreBlobWithDelta(context.Context, *StoreBlobWithDeltaRequest) (*StoreBlobWithDeltaResponse, error)
	GetBlobWithDelta(context.Context, *GetBlobWithDeltaRequest) (*GetBlobWithDeltaResponse, error)
	// Batch Operations
	BatchOperations(context.Context, *BatchOperationsRequest) (*BatchOperationsResponse, error)
	// File Operations
	AddFile(context.Context, *AddFileRequest) (*AddFileResponse, error)
	ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error)
	WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error)
	RemoveFile(context.Context, *RemoveFileRequest) (*emptypb.Empty, error)
	MoveFile(context.Context, *MoveFileRequest) (*emptypb.Empty, error)
	// Commit Operations
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	GetCommit(context.Context, *GetCommitRequest) (*GetCommitResponse, error)
	ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsResponse, error)
	// Branch Operations
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*emptypb.Empty, error)
	CheckoutBranch(context.Context, *CheckoutBranchRequest) (*emptypb.Empty, error)
	MergeBranch(context.Context, *MergeBranchRequest) (*MergeBranchResponse, error)
	// Search Operations
	FullTextSearch(context.Context, *FullTextSearchRequest) (*FullTextSearchResponse, error)
	ExecuteSQLQuery(context.Context, *ExecuteSQLQueryRequest) (*ExecuteSQLQueryResponse, error)
	SearchWithAggregation(context.Context, *SearchWithAggregationRequest) (*SearchWithAggregationResponse, error)
	// Streaming Operations
	StreamBlob(grpc.BidiStreamingServer[StreamBlobRequest, StreamBlobResponse]) error
	UploadBlobStream(grpc.ClientStreamingServer[UploadBlobStreamRequest, UploadBlobStreamResponse]) error
	// Health and Status
	GetHealth(context.Context, *emptypb.Empty) (*HealthResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	mustEmbedUnimplementedGoVCServiceServer()
}

// UnimplementedGoVCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoVCServiceServer struct{}

func (UnimplementedGoVCServiceServer) CreateRepository(context.Context, *CreateRepositoryRequest) (*CreateRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (UnimplementedGoVCServiceServer) GetRepository(context.Context, *GetRepositoryRequest) (*GetRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (UnimplementedGoVCServiceServer) DeleteRepository(context.Context, *DeleteRepositoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (UnimplementedGoVCServiceServer) ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (UnimplementedGoVCServiceServer) StoreBlob(context.Context, *StoreBlobRequest) (*StoreBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreBlob not implemented")
}
func (UnimplementedGoVCServiceServer) GetBlob(context.Context, *GetBlobRequest) (*GetBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (UnimplementedGoVCServiceServer) StoreBlobWithDelta(context.Context, *StoreBlobWithDeltaRequest) (*StoreBlobWithDeltaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreBlobWithDelta not implemented")
}
func (UnimplementedGoVCServiceServer) GetBlobWithDelta(context.Context, *GetBlobWithDeltaRequest) (*GetBlobWithDeltaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlobWithDelta not implemented")
}
func (UnimplementedGoVCServiceServer) BatchOperations(context.Context, *BatchOperationsRequest) (*BatchOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperations not implemented")
}
func (UnimplementedGoVCServiceServer) AddFile(context.Context, *AddFileRequest) (*AddFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedGoVCServiceServer) ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedGoVCServiceServer) WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedGoVCServiceServer) RemoveFile(context.Context, *RemoveFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFile not implemented")
}
func (UnimplementedGoVCServiceServer) MoveFile(context.Context, *MoveFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedGoVCServiceServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedGoVCServiceServer) GetCommit(context.Context, *GetCommitRequest) (*GetCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommit not implemented")
}
func (UnimplementedGoVCServiceServer) ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (UnimplementedGoVCServiceServer) CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (UnimplementedGoVCServiceServer) ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}
func (UnimplementedGoVCServiceServer) DeleteBranch(context.Context, *DeleteBranchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (UnimplementedGoVCServiceServer) CheckoutBranch(context.Context, *CheckoutBranchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutBranch not implemented")
}
func (UnimplementedGoVCServiceServer) MergeBranch(context.Context, *MergeBranchRequest) (*MergeBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeBranch not implemented")
}
func (UnimplementedGoVCServiceServer) FullTextSearch(context.Context, *FullTextSearchRequest) (*FullTextSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullTextSearch not implemented")
}
func (UnimplementedGoVCServiceServer) ExecuteSQLQuery(context.Context, *ExecuteSQLQueryRequest) (*ExecuteSQLQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSQLQuery not implemented")
}
func (UnimplementedGoVCServiceServer) SearchWithAggregation(context.Context, *SearchWithAggregationRequest) (*SearchWithAggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWithAggregation not implemented")
}
func (UnimplementedGoVCServiceServer) StreamBlob(grpc.BidiStreamingServer[StreamBlobRequest, StreamBlobResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlob not implemented")
}
func (UnimplementedGoVCServiceServer) UploadBlobStream(grpc.ClientStreamingServer[UploadBlobStreamRequest, UploadBlobStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadBlobStream not implemented")
}
func (UnimplementedGoVCServiceServer) GetHealth(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedGoVCServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedGoVCServiceServer) mustEmbedUnimplementedGoVCServiceServer() {}
func (UnimplementedGoVCServiceServer) testEmbeddedByValue()                     {}

// UnsafeGoVCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoVCServiceServer will
// result in compilation errors.
type UnsafeGoVCServiceServer interface {
	mustEmbedUnimplementedGoVCServiceServer()
}

func RegisterGoVCServiceServer(s grpc.ServiceRegistrar, srv GoVCServiceServer) {
	// If the following call pancis, it indicates UnimplementedGoVCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoVCService_ServiceDesc, srv)
}

func _GoVCService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_CreateRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).CreateRepository(ctx, req.(*CreateRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_GetRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).GetRepository(ctx, req.(*GetRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_DeleteRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).DeleteRepository(ctx, req.(*DeleteRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_ListRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_StoreBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).StoreBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_StoreBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).StoreBlob(ctx, req.(*StoreBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_GetBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).GetBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_GetBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).GetBlob(ctx, req.(*GetBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_StoreBlobWithDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreBlobWithDeltaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).StoreBlobWithDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_StoreBlobWithDelta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).StoreBlobWithDelta(ctx, req.(*StoreBlobWithDeltaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_GetBlobWithDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlobWithDeltaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).GetBlobWithDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_GetBlobWithDelta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).GetBlobWithDelta(ctx, req.(*GetBlobWithDeltaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_BatchOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).BatchOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_BatchOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).BatchOperations(ctx, req.(*BatchOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_AddFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).AddFile(ctx, req.(*AddFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_ReadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).ReadFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_WriteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).WriteFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_RemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).RemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_RemoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).RemoveFile(ctx, req.(*RemoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_MoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).MoveFile(ctx, req.(*MoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_GetCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).GetCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_GetCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).GetCommit(ctx, req.(*GetCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_ListCommits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).ListCommits(ctx, req.(*ListCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_CreateBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_ListBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_DeleteBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_CheckoutBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).CheckoutBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_CheckoutBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).CheckoutBranch(ctx, req.(*CheckoutBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_MergeBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).MergeBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_MergeBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).MergeBranch(ctx, req.(*MergeBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_FullTextSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullTextSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).FullTextSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_FullTextSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).FullTextSearch(ctx, req.(*FullTextSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_ExecuteSQLQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteSQLQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).ExecuteSQLQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_ExecuteSQLQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).ExecuteSQLQuery(ctx, req.(*ExecuteSQLQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_SearchWithAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWithAggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).SearchWithAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_SearchWithAggregation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).SearchWithAggregation(ctx, req.(*SearchWithAggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_StreamBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoVCServiceServer).StreamBlob(&grpc.GenericServerStream[StreamBlobRequest, StreamBlobResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GoVCService_StreamBlobServer = grpc.BidiStreamingServer[StreamBlobRequest, StreamBlobResponse]

func _GoVCService_UploadBlobStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoVCServiceServer).UploadBlobStream(&grpc.GenericServerStream[UploadBlobStreamRequest, UploadBlobStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GoVCService_UploadBlobStreamServer = grpc.ClientStreamingServer[UploadBlobStreamRequest, UploadBlobStreamResponse]

func _GoVCService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).GetHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVCService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVCServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVCService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVCServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoVCService_ServiceDesc is the grpc.ServiceDesc for GoVCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoVCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "govc.GoVCService",
	HandlerType: (*GoVCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepository",
			Handler:    _GoVCService_CreateRepository_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _GoVCService_GetRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _GoVCService_DeleteRepository_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _GoVCService_ListRepositories_Handler,
		},
		{
			MethodName: "StoreBlob",
			Handler:    _GoVCService_StoreBlob_Handler,
		},
		{
			MethodName: "GetBlob",
			Handler:    _GoVCService_GetBlob_Handler,
		},
		{
			MethodName: "StoreBlobWithDelta",
			Handler:    _GoVCService_StoreBlobWithDelta_Handler,
		},
		{
			MethodName: "GetBlobWithDelta",
			Handler:    _GoVCService_GetBlobWithDelta_Handler,
		},
		{
			MethodName: "BatchOperations",
			Handler:    _GoVCService_BatchOperations_Handler,
		},
		{
			MethodName: "AddFile",
			Handler:    _GoVCService_AddFile_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _GoVCService_ReadFile_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _GoVCService_WriteFile_Handler,
		},
		{
			MethodName: "RemoveFile",
			Handler:    _GoVCService_RemoveFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _GoVCService_MoveFile_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _GoVCService_Commit_Handler,
		},
		{
			MethodName: "GetCommit",
			Handler:    _GoVCService_GetCommit_Handler,
		},
		{
			MethodName: "ListCommits",
			Handler:    _GoVCService_ListCommits_Handler,
		},
		{
			MethodName: "CreateBranch",
			Handler:    _GoVCService_CreateBranch_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _GoVCService_ListBranches_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _GoVCService_DeleteBranch_Handler,
		},
		{
			MethodName: "CheckoutBranch",
			Handler:    _GoVCService_CheckoutBranch_Handler,
		},
		{
			MethodName: "MergeBranch",
			Handler:    _GoVCService_MergeBranch_Handler,
		},
		{
			MethodName: "FullTextSearch",
			Handler:    _GoVCService_FullTextSearch_Handler,
		},
		{
			MethodName: "ExecuteSQLQuery",
			Handler:    _GoVCService_ExecuteSQLQuery_Handler,
		},
		{
			MethodName: "SearchWithAggregation",
			Handler:    _GoVCService_SearchWithAggregation_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _GoVCService_GetHealth_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _GoVCService_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBlob",
			Handler:       _GoVCService_StreamBlob_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadBlobStream",
			Handler:       _GoVCService_UploadBlobStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/govc.proto",
}
