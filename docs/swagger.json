{
    "swagger": "2.0",
    "info": {
        "description": "A high-performance Git version control system API with memory-first architecture",
        "title": "GOVC API",
        "termsOfService": "https://github.com/caiatech/govc/blob/main/LICENSE",
        "contact": {
            "name": "GOVC API Support",
            "url": "https://github.com/caiatech/govc/issues",
            "email": "support@caiatech.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/caiatech/govc/blob/main/LICENSE"
        },
        "version": "1.0.0-dev"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/repositories": {
            "get": {
                "description": "Retrieves a list of all repositories with their metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository Management"
                ],
                "summary": "List all repositories",
                "responses": {
                    "200": {
                        "description": "List of repositories",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "repositories": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/api.RepoResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new Git repository with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository Management"
                ],
                "summary": "Create a new repository",
                "parameters": [
                    {
                        "description": "Repository creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateRepoRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Repository created successfully",
                        "schema": {
                            "$ref": "#/definitions/api.RepoResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Repository already exists",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Maximum repositories reached",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{repo_id}": {
            "get": {
                "description": "Retrieves detailed information about a specific repository",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository Management"
                ],
                "summary": "Get repository information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Repository information",
                        "schema": {
                            "$ref": "#/definitions/api.RepoResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently deletes a repository and all its data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repository Management"
                ],
                "summary": "Delete a repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Repository deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{repo_id}/branches": {
            "get": {
                "description": "Retrieves a list of all branches in the repository",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Git Operations"
                ],
                "summary": "List all branches",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of branches",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "branches": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/api.BranchResponse"
                                    }
                                },
                                "count": {
                                    "type": "integer"
                                },
                                "current": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new branch from the current or specified branch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Git Operations"
                ],
                "summary": "Create a new branch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Branch creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateBranchRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Branch created successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository or source branch not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Branch already exists",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{repo_id}/branches/{branch}": {
            "delete": {
                "description": "Permanently deletes a branch (cannot delete current branch)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Git Operations"
                ],
                "summary": "Delete a branch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Branch name",
                        "name": "branch",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Branch deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Cannot delete current branch",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{repo_id}/checkout": {
            "post": {
                "description": "Switches the working directory to a different branch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Git Operations"
                ],
                "summary": "Checkout a branch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Checkout request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CheckoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Branch checked out successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{repo_id}/commits": {
            "get": {
                "description": "Retrieves the commit history for a repository",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Git Operations"
                ],
                "summary": "Get commit history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of commits to return (default: 50, max: 10000)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commit history",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "commits": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/api.CommitResponse"
                                    }
                                },
                                "count": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new commit with staged changes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Git Operations"
                ],
                "summary": "Create a new commit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Commit request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CommitRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Commit created successfully",
                        "schema": {
                            "$ref": "#/definitions/api.CommitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{repo_id}/commits/{commit}": {
            "get": {
                "description": "Retrieves detailed information about a specific commit including files and diff",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Git Operations"
                ],
                "summary": "Get commit details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Commit hash",
                        "name": "commit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commit details",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "commit": {
                                    "$ref": "#/definitions/api.CommitResponse"
                                },
                                "diff": {
                                    "type": "object"
                                },
                                "files": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/api.FileResponse"
                                    }
                                },
                                "tree": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or not a commit",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository or commit not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{repo_id}/files": {
            "post": {
                "description": "Writes a file to the working directory and stages it for commit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Git Operations"
                ],
                "summary": "Add a file to repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "File addition request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.AddFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File added successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{repo_id}/merge": {
            "post": {
                "description": "Merges one branch into another branch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Git Operations"
                ],
                "summary": "Merge branches",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Merge request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MergeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Branches merged successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Merge conflict",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{repo_id}/status": {
            "get": {
                "description": "Returns the current status of the working directory and staging area",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Git Operations"
                ],
                "summary": "Get repository status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Repository status",
                        "schema": {
                            "$ref": "#/definitions/api.StatusResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/repositories": {
            "get": {
                "description": "Retrieves a list of all repositories using V2 clean architecture with enhanced metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "List all repositories (V2 Clean Architecture)",
                "responses": {
                    "200": {
                        "description": "List of repositories",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "repositories": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/api.RepoResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new Git repository using the V2 clean architecture with enhanced performance and modularity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "Create a new repository (V2 Clean Architecture)",
                "parameters": [
                    {
                        "description": "Repository creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateRepoRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Repository created successfully",
                        "schema": {
                            "$ref": "#/definitions/api.RepoResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Repository already exists",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Maximum repositories reached",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/repositories/{repo_id}": {
            "get": {
                "description": "Retrieves detailed information about a specific repository using V2 clean architecture",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "Get repository information (V2 Clean Architecture)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Repository information",
                        "schema": {
                            "$ref": "#/definitions/api.RepoResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently deletes a repository using V2 clean architecture with proper cleanup",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "Delete a repository (V2 Clean Architecture)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Repository deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/repositories/{repo_id}/branches": {
            "get": {
                "description": "Retrieves all branches using V2 clean architecture with enhanced metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "List all branches (V2 Clean Architecture)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of branches",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "branches": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/api.BranchResponse"
                                    }
                                },
                                "count": {
                                    "type": "integer"
                                },
                                "current": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new branch using V2 clean architecture with enhanced branch management",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "Create a new branch (V2 Clean Architecture)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Branch creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateBranchRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Branch created successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/repositories/{repo_id}/commits": {
            "get": {
                "description": "Retrieves the commit history using V2 clean architecture with enhanced performance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "Get commit history (V2 Clean Architecture)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of commits to return (default: 20, max: 10000)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commit history",
                        "schema": {
                            "$ref": "#/definitions/api.LogResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new commit with staged changes using V2 clean architecture",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "Create a new commit (V2 Clean Architecture)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Commit request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CommitRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Commit created successfully",
                        "schema": {
                            "$ref": "#/definitions/api.CommitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/repositories/{repo_id}/files": {
            "get": {
                "description": "Reads a file from the working directory using V2 clean architecture with binary support",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "Read a file from repository (V2 Clean Architecture)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File path relative to repository root",
                        "name": "path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File contents",
                        "schema": {
                            "$ref": "#/definitions/api.ReadFileResponse"
                        }
                    },
                    "400": {
                        "description": "Missing path parameter",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository or file not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Writes a file to the working directory using V2 clean architecture",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "Write a file to repository (V2 Clean Architecture)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "File write request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.WriteFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File written successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Writes a file to the working directory and stages it using V2 clean architecture",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "Add a file to repository (V2 Clean Architecture)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "File addition request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.AddFileRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "File added successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/repositories/{repo_id}/status": {
            "get": {
                "description": "Returns the current status using V2 clean architecture with improved accuracy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V2 Architecture"
                ],
                "summary": "Get repository status (V2 Clean Architecture)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Repository status",
                        "schema": {
                            "$ref": "#/definitions/api.StatusResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AddFileRequest": {
            "type": "object",
            "required": [
                "content",
                "path"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "example": "# My Project"
                },
                "path": {
                    "type": "string",
                    "example": "README.md"
                }
            }
        },
        "api.BranchResponse": {
            "type": "object",
            "properties": {
                "commit": {
                    "type": "string",
                    "example": "abc123def456"
                },
                "is_current": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "main"
                }
            }
        },
        "api.CheckoutRequest": {
            "type": "object",
            "required": [
                "branch"
            ],
            "properties": {
                "branch": {
                    "type": "string",
                    "example": "main"
                }
            }
        },
        "api.CommitRequest": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "author": {
                    "type": "string",
                    "example": "John Doe"
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "message": {
                    "type": "string",
                    "example": "Initial commit"
                }
            }
        },
        "api.CommitResponse": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string",
                    "example": "John Doe"
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "hash": {
                    "type": "string",
                    "example": "abc123def456"
                },
                "message": {
                    "type": "string",
                    "example": "Initial commit"
                },
                "parent": {
                    "type": "string",
                    "example": "def456abc123"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "api.CreateBranchRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "from": {
                    "type": "string",
                    "example": "main"
                },
                "name": {
                    "type": "string",
                    "example": "feature/new-feature"
                }
            }
        },
        "api.CreateRepoRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "my-repo"
                },
                "memory_only": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "REPO_NOT_FOUND"
                },
                "details": {},
                "error": {
                    "type": "string",
                    "example": "Repository not found"
                }
            }
        },
        "api.FileResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "api.LogResponse": {
            "type": "object",
            "properties": {
                "commits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.CommitResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.MergeRequest": {
            "type": "object",
            "required": [
                "from",
                "to"
            ],
            "properties": {
                "from": {
                    "type": "string",
                    "example": "feature/new-feature"
                },
                "to": {
                    "type": "string",
                    "example": "main"
                }
            }
        },
        "api.ReadFileResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "encoding": {
                    "description": "\"utf-8\" or \"base64\"",
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "api.RepoResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "current_branch": {
                    "type": "string",
                    "example": "main"
                },
                "id": {
                    "type": "string",
                    "example": "my-repo"
                },
                "path": {
                    "type": "string",
                    "example": "/repos/my-repo"
                }
            }
        },
        "api.StatusResponse": {
            "type": "object",
            "properties": {
                "branch": {
                    "type": "string",
                    "example": "main"
                },
                "clean": {
                    "type": "boolean",
                    "example": false
                },
                "modified": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"file2.txt\"]"
                    ]
                },
                "staged": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"file1.txt\"]"
                    ]
                },
                "untracked": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"file3.txt\"]"
                    ]
                }
            }
        },
        "api.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Repository deleted successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "api.WriteFileRequest": {
            "type": "object",
            "required": [
                "content",
                "path"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Enter the token with the `Bearer: ` prefix, e.g. \"Bearer abcde12345\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "ApiKeyQuery": {
            "description": "API key for accessing the API",
            "type": "apiKey",
            "name": "api_key",
            "in": "query"
        },
        "BasicAuth": {
            "type": "basic"
        }
    },
    "tags": [
        {
            "description": "Operations for managing Git repositories",
            "name": "Repository Management"
        },
        {
            "description": "Core Git operations like add, commit, checkout",
            "name": "Git Operations"
        },
        {
            "description": "Authentication and authorization endpoints",
            "name": "Authentication"
        },
        {
            "description": "Health checks and monitoring endpoints",
            "name": "Health \u0026 Monitoring"
        },
        {
            "description": "Clean architecture V2 API endpoints",
            "name": "V2 Architecture"
        }
    ]
}